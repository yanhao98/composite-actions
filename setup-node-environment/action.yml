# 🔗 Links:
# Source file: https://github.com/obytes/react-native-template-obytes/blob/master/.github/actions/setup-node-pnpm-install/action.yml
# Composite actions docs: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action

# ✍️ Description:
# This is a composite action, which means it can be used in other actions.
# It is used in almost all workflows to set up the environment and install dependencies.
# Updating  the package manager or Node version here will be reflected in all workflows.

# 👀 Example usage:
#       - name : 📦 Setup Node + PNPM + install deps
#         uses: ./.github/actions/setup-node-pnpm-install

name: "Setup Node Environment"
description: "Setup pnpm + Node.js + install dependencies"
runs:
  using: "composite"
  steps:
    - id: check-git-folder
      shell: bash
      run: |
        #     🤖 判断是否存在 .git 文件夹 🤖
        [ -d .git ] && { echo "🤖 Found .git folder"; echo "git-folder-exists=true" >> $GITHUB_OUTPUT; } || { echo "🤖 No .git folder found"; echo "git-folder-exists=false" >> $GITHUB_OUTPUT; }

    - uses: actions/checkout@v4.2.1
      if: steps.check-git-folder.outputs.git-folder-exists == 'false'
      with:
        # fetch-depth: 0 # zero stands for full checkout, which is required for semantic-release
        filter: blob:none # we don't need all blobs, only the full tree
        show-progress: false

    - shell: bash
      id: prepare
      run: |
        # 🤖 准备数据 🤖

        # 包管理器
        packageManager=$(node -p "require('./package.json').packageManager")
        echo "🤖 package.json定义的包管理器: $packageManager"
        echo "packageManager=$packageManager" >> $GITHUB_OUTPUT

        # pnpm是否已安装
        pnpmInstalled=$(which pnpm > /dev/null && echo "true" || echo "false")
        echo "🤖 pnpm是否已安装: $pnpmInstalled"
        echo "pnpmInstalled=$pnpmInstalled" >> $GITHUB_OUTPUT

        # 判断pnpm-lock.yaml文件是否存在
        unset pnpm-lock-exists
        pnpm-lock-exists=$( [ -f "pnpm-lock.yaml" ] && echo "true" || echo "false" )
        echo "🤖 pnpm-lock.yaml是否存在: $pnpm-lock-exists"
        echo "pnpm-lock-exists=$pnpm-lock-exists" >> $GITHUB_OUTPUT

        # Node版本
        touch .npmrc # 如果不存在则创建 .npmrc 文件
        nodeInNpmrc=$(sed -n 's/.*use-node-version=\([0-9.]*\).*/\1/p' .npmrc)
        nodeInNpmrcMajor=$(echo $nodeInNpmrc | cut -d. -f1)
        echo "🤖 .npmrc文件中定义的Node版本: $nodeInNpmrc -> $nodeInNpmrcMajor"
        nodeVersion=${nodeInNpmrcMajor:-"lts/*"} # 如果未定义则使用默认值

    - uses: pnpm/action-setup@v4 # https://github.com/pnpm/action-setup?tab=readme-ov-file#inputs
      if: steps.prepare.outputs.pnpmInstalled == 'false'

    - uses: actions/setup-node@v4 # https://github.com/actions/setup-node?tab=readme-ov-file#usage
      with:
        node-version: ${{ steps.prepare.outputs.nodeVersion }}
        cache: ${{ steps.prepare.outputs.pnpm-lock-exists == 'true' && 'pnpm' || '' }}

    - run: pnpm install --frozen-lockfile
      if: steps.prepare.outputs.pnpm-lock-exists == 'true'
      shell: bash
